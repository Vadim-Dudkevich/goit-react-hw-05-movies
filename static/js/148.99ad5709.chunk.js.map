{"version":3,"file":"static/js/148.99ad5709.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","pages/CastPage.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastsList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  grid-gap: 15px;\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n  padding: 50px 80px 90px;\n`;\n\nexport const Item = styled.li`\n  padding: 10px;\n  border-radius: 6px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const Photo = styled.img``;\n\nexport const ActorName = styled.h3`\n  font-size: 16px;\n  font-weight: 500;\n  color: #585858;\n`;\n\nexport const NoInformationText = styled.p`\n  display: flex;\n  justify-content: center;\n  padding: 20px;\n  font-weight: 500;\n`;\n","import propTypes from 'prop-types';\nimport actorIcon from '../../images/no-image-available.jpg';\nimport { CastsList, Item, Photo, ActorName } from './Cast.styled';\n\nexport default function Cast({ cast }) {\n  return (\n    <>\n      <CastsList>\n        {cast.map(({ id, name, photo }) => (\n          <Item key={id}>\n            {photo ? (\n              <Photo\n                src={`https://image.tmdb.org/t/p/w300/${photo}`}\n                alt={name}\n              />\n            ) : (\n              <img src={actorIcon} alt={name} width={300} height={450} />\n            )}\n\n            <ActorName>{name}</ActorName>\n          </Item>\n        ))}\n      </CastsList>\n    </>\n  );\n}\nCast.propTypes = {\n  cast: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number,\n      name: propTypes.string,\n      photo: propTypes.string,\n    })\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/api';\nimport Cast from 'components/Cast/Cast';\nimport { NoInformationText } from 'components/Cast/Cast.styled';\n\nexport default function CastPage() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    fetchMovieCast(movieId).then(r => {\n      const mappedActors = [];\n      r.cast.map(({ id, original_name, profile_path }) => {\n        const actor = {\n          id: id,\n          name: original_name,\n          photo: profile_path,\n        };\n        return mappedActors.push(actor);\n      });\n      setCast(mappedActors);\n    });\n  }, [movieId]);\n\n  return cast && cast.length > 0 ? (\n    <Cast cast={cast} />\n  ) : (\n    <NoInformationText>Sorry, we have no information here</NoInformationText>\n  );\n}\n","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3';\nconst KEY = '80905ac5224611f92fb2e3e958ee9afc';\n\nasync function fetchMoviesBySearch(query) {\n  const url = `${URL}/search/movie?api_key=${KEY}&query=${query}&page=1`;\n  return await axios.get(`${url}`).then(response => response.data);\n}\n\nasync function fetchTrendingMovies() {\n  const trendingURL = `${URL}/trending/movie/day?api_key=${KEY}&page=${1}`;\n  return await axios.get(`${trendingURL}`).then(response => response.data);\n}\n\nasync function fetchMovieDetails(movieId) {\n  const detailsURL = `${URL}/movie/${movieId}?api_key=${KEY}&language=en-US`;\n  return await axios.get(`${detailsURL}`).then(response => response.data);\n}\n\nasync function fetchMovieCast(movieId) {\n  const castURL = `${URL}/movie/${movieId}/credits?api_key=${KEY}`;\n  return await axios.get(`${castURL}`).then(response => response.data);\n}\n\nasync function fetchMoviesReviews(movieId) {\n  const reviewsURL = `${URL}/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`;\n  return await axios.get(`${reviewsURL}`).then(response => response.data);\n}\n\nexport {\n  fetchMoviesBySearch,\n  fetchTrendingMovies,\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchMoviesReviews,\n};\n"],"names":["CastsList","styled","Item","Photo","ActorName","NoInformationText","Cast","cast","map","id","name","photo","src","alt","actorIcon","width","height","CastPage","movieId","useParams","useState","setCast","useEffect","fetchMovieCast","then","r","mappedActors","actor","original_name","profile_path","push","length","URL","KEY","fetchMoviesBySearch","query","url","axios","response","data","fetchTrendingMovies","trendingURL","fetchMovieDetails","detailsURL","castURL","fetchMoviesReviews","reviewsURL"],"sourceRoot":""}